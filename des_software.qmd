---
title: "Software"
bibliography: 
    - ref_modelica.bib
    - ref_des.bib
csl: ieee-control-systems.csl
crossref:
  fig-prefix: Fig
---

The number of software tools for defining and analysing state automata is huge, as is the number of domains of application of this modelling concept. As we are leaning towards the control systems domain, we first encounter the tools produced by The Mathworks company (Matlab and Simulink)

## Matlab and Simulink
- [StateFlow](https://www.mathworks.com/products/stateflow.html) – finite state automata within Simulink. A nice interactive tutorial is launched directly within Simulink upon entering `learning.simulink.launchOnramp("stateflow")` in Matlab. This is the primary tool for our course, as it extends nicely to hybrid systems. An example is shown in @fig-statechart-stateflow below.

![Screenshot of a state "chart" in Simscape](des_figures/aircontrol-chart_stateflow.png){#fig-statechart-stateflow}

- [SimEvents](https://www.mathworks.com/products/simevents.html) – oriented towards one instance of the (state) automata, namely *queuing systems*. You may want to have a look at the [series of introductory videos](https://www.mathworks.com/videos/series/understanding-discrete-event-simulation.html) by the Mathworks, although we are not going to rely on this tool in our course.

Several tools are also available outside Matlab and Simulink, and it is certainly good to be aware of these alternatives.

## (Open)Modelica

A popular modelling language for physical systems is [Modelica](https://www.modelica.org). Starting with version 3.3 (several years ago already), it has a support for state machines, see Chapter 17 in the [language specification](https://specification.modelica.org/master/state-machines.html) and the screenshot in @fig-statemachine-modelica below. A readable introduction to state machines in Modelica is in @elmqvistStateMachinesModelica2012.

![Screenshot of a state machine diagram in Modelica](des_figures/statemachine_modelica.png){#fig-statemachine-modelica}

Several implementations of Modelica language and compiler exist. On the FOSS side, [OpenModelica](https://openmodelica.org) is a popular choice. Slides from an introdutory presentation @thieleStateMachinesOpenModelica2015 about state machines in OpenModelica are available for free download.

## UPPAAL

Dedicated software for timed automata. Not only modelling and simulation but also formal verification. Available at [https://uppaal.org/](https://uppaal.org). In our course we will only use it in this block/week. A tutorial is @behrmannTutorialUppaal2004.

## Python

[SimPy](https://simpy.readthedocs.io/en/latest/) – discrete-event simulation in Python. We are not going to use it in our course, but if you are a Python enthusiast, you may want to have a look at it.

## Julia

Two major packages for discrete-event simulation in Julia are:

- [ConcurrentSim.jl](https://github.com/JuliaDynamics/ConcurrentSim.jl) – discrete-event simulation in Julia.
- [DiscreteEvents.jl](https://github.com/JuliaDynamics/DiscreteEvents.jl) – discrete-event simulation in Julia.

## UML/SysML

If you have been exposed to software engineering, you have probably seen [UML](https://www.uml.org) diagrams. Their extension (and restriction at the same time) toward systems that also contain hardware is called [SysML](https://sysml.org). And SysML does have support for defining state machines (by drawing the [state machine diagrams]((https://sysml.org/sysml-faq/what-is-state-machine-diagram.html))), see the screenshot in @fig-statemachine-sysml below.

![Screenshot of a state machine diagram in SysML](des_figures/statemachine_sysml.png){#fig-statemachine-sysml}

SysML standard also augments the original concept of a state automaton with hierarchies, and some more. But we are not going to discuss it here. Should you need to follow this standard in your project, you may consider exploring some free&open-source (FOSS) tool for creating SysML diagrams such as [Modelio](https://www.modelio.org) or [Eclipse Papyrus](https://eclipse.dev/papyrus/). But we are not going to use them in our course.

