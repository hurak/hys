@article{giuaPetriNetsAutomatic2018,
  title = {Petri Nets and {{Automatic Control}}: {{A}} Historical Perspective},
  shorttitle = {Petri Nets and {{Automatic Control}}},
  author = {Giua, Alessandro and Silva, Manuel},
  year = {2018},
  month = jan,
  journal = {Annual Reviews in Control},
  volume = {45},
  pages = {223--239},
  issn = {1367-5788},
  doi = {10.1016/j.arcontrol.2018.04.006},
  url = {https://www.sciencedirect.com/science/article/pii/S1367578818300117},
  urldate = {2022-09-21},
  abstract = {The goal of this paper is to overview the historical development of the field of Petri nets (PNs) from a Systems Theory and Automatic Control perspective. It is intentionally not meant to be comprehensive: we limit ourselves to outline, through selected representative topics, some of the conceptual issues studied in the literature. In a first part we retrace the emergence of some basic net concepts to provide a broad view of the family of PN formalisms. Then we focus, more specifically, on the use of Petri nets within Automatic Control. Discrete net models have been considered since the middle of the 70s and starting since the late 80s have also been used for addressing classical problems, such as supervisory and deadlock control, state estimation, diagnosis, and so on. The double benefit is the ability to model a larger class of systems and to provide efficient algorithms for solving certain of those problems. We also discuss new approaches based on continuous and hybrid nets, which have been developed within the Automatic Control community.},
  langid = {english}
}

@book{reisigUnderstandingPetriNets2013,
  title = {Understanding {{Petri Nets}}: {{Modeling Techniques}}, {{Analysis Methods}}, {{Case Studies}}},
  shorttitle = {Understanding {{Petri Nets}}},
  author = {Reisig, Wolfgang},
  year = {2013},
  month = jul,
  publisher = {Springer},
  address = {Berlin; Heidelberg},
  url = {https://doi.org/10.1007/978-3-642-33278-4},
  isbn = {978-3-642-33277-7},
  langid = {english}
}

@book{hruzModelingControlDiscreteevent2007,
  title = {Modeling and {{Control}} of {{Discrete-event Dynamic Systems}}: With {{Petri Nets}} and {{Other Tools}}},
  shorttitle = {Modeling and {{Control}} of {{Discrete-event Dynamic Systems}}},
  author = {Hr{\'u}z, Branislav and Zhou, MengChu},
  year = {2007},
  month = aug,
  series = {Advanced {{Textbooks}} in {{Control}} and {{Signal Processing}} ({{C}}\&{{SP}})},
  publisher = {Springer},
  address = {London},
  url = {https://doi.org/10.1007/978-1-84628-877-7},
  abstract = {Discrete-event dynamic systems (DEDs) permeate our world. They are of great importance in modern manufacturing processes, transportation and various forms of computer and communications networking. This book begins with the mathematical basics required for the study of DEDs and moves on to present various tools used in their modeling and control. Industrial examples illustrate the concepts and methods discussed, making this book an invaluable aid for students embarking on further courses in control, manufacturing engineering or computer studies.},
  isbn = {978-1-84628-872-2},
  langid = {english}
}

@misc{ISOIEC1590922011,
  title = {{{ISO}}/{{IEC}} 15909-2:2011 {{Systems}} and Software Engineering --- {{High-level Petri}} Nets --- {{Part}} 2: {{Transfer}} Format},
  shorttitle = {{{ISO}}/{{IEC}} 15909-2},
  year = {2011},
  month = feb,
  number = {15909-2},
  publisher = {ISO/IEC},
  url = {https://www.iso.org/standard/43538.html},
  urldate = {2023-09-27},
  abstract = {ISO/IEC 15909-2:2011 defines an XML-based transfer format for Petri nets, which are defined conceptually and mathematically in ISO/IEC 15909-1. This transfer format enables the exchange of Petri nets among different Petri net tools and among different parties. Moreover, ISO/IEC 15909-2:2011 defines some concepts and XML-based syntax for defining the detailed graphical appearance of Petri nets. The focus of ISO/IEC 15909-2:2011 is on the transfer format for Place/Transition Nets, High-level Petri Nets and Symmetric Nets. The presentation, however, is structured in such a way that it is open for future extensions, so that other versions of Petri nets can be added later. The exact definition of this extension mechanism, called Petri net type definition, is not defined in ISO/IEC 15909-2:2011; it will be defined in ISO/IEC 15909-3. The transfer format will be used to transfer specifications of systems developed in High-level Petri Nets between tools to facilitate the development of systems in teams. ISO/IEC 15909-2:2011 is written as a reference for developers of Petri net tools. It will also be useful for researchers who define new versions and variants of Petri nets.},
  langid = {english}
}

@misc{ISOIEC1590912019,
  title = {{{ISO}}/{{IEC}} 15909-1:2019 {{Systems}} and Software Engineering --- {{High-level Petri}} Nets --- {{Part}} 1: {{Concepts}}, Definitions and Graphical Notation},
  shorttitle = {{{ISO}}/{{IEC}} 15909-1},
  year = {2019},
  month = aug,
  number = {15909-1},
  publisher = {ISO/IEC},
  url = {https://www.iso.org/standard/67235.html},
  urldate = {2023-09-27},
  abstract = {This document defines a Petri net modeling language or technique, called high-level Petri nets, including its syntax and semantics. It provides a reference definition that can be used both within and between organizations, to ensure a common understanding of the technique and of the specifications written using the technique. This document also facilitates the development and interoperability of Petri net computer support tools. This document is applicable to a wide variety of concurrent discrete event systems and in particular distributed systems. Generic fields of application include: --- requirements analysis; --- development of specifications, designs and test suites; --- descriptions of existing systems prior to re-engineering; --- modeling business and software processes; --- providing the semantics for concurrent languages; --- simulation of systems to increase confidence; --- formal analysis of the behavior of systems; --- and development of Petri net support tools. This document can be applied to the design of a broad range of systems and processes, including aerospace, air traffic control, avionics, banking, biological and chemical processes, business processes, communication protocols, computer hardware architectures, control systems, databases, defense command and control systems, distributed computing, electronic commerce, fault-tolerant systems, games, hospital procedures, information systems, Internet protocols and applications, legal processes, logistics, manufacturing systems, metabolic processes, music, nuclear power systems, operating systems, transport systems (including railway control), security systems, telecommunications and workflows.},
  langid = {english}
}

@misc{ISOIEC1590932021,
  title = {{{ISO}}/{{IEC}} 15909-3:2021: {{Systems}} and Software Engineering --- {{High-level Petri}} Nets --- {{Part}} 3: {{Extensions}} and Structuring Mechanisms},
  shorttitle = {{{ISO}}/{{IEC}} 15909-3},
  year = {2021},
  number = {15909-3},
  publisher = {ISO/IEC},
  url = {https://www.iso.org/standard/81504.html},
  urldate = {2023-09-29},
  abstract = {This document defines enrichments, extensions and structuring mechanisms of Petri nets, applied on the definitions proposed in ISO/IEC 15909-1. This document facilitates the definitions of new kinds of Petri nets and their interoperability, while remaining compatible with those defined in ISO/IEC 15909-1. This document is written as a reference for designers of new Petri net variants, by defining common enrichments, extensions and structuring mechanisms, as well as a generalized process for defining new ones. This document is applicable to a wide variety of concurrent discrete event systems and in particular distributed systems. Generic fields of application include: ---    requirements analysis; ---    development of specifications, designs and test suites; ---    descriptions of existing systems prior to re-engineering; ---    modelling business and software processes; ---    providing the semantics for concurrent languages; ---    simulation of systems to increase confidence; ---    formal analysis of the behaviour of systems; ---    and development of Petri net support tools. This document can be applied to the design of a broad range of systems and processes, including aerospace, air traffic control, avionics, banking, biological and chemical processes, business processes, communication protocols, computer hardware architectures, control systems, databases, defence command and control systems, distributed computing, electronic commerce, fault-tolerant systems, games, hospital procedures, information systems, Internet protocols and applications, legal processes, logistics, manufacturing systems, metabolic processes, music, nuclear power systems, operating systems, transport systems (including railway control), security systems, telecommunications and workflow.},
  langid = {english}
}

@article{davidGrafcetPowerfulTool1995,
  title = {Grafcet: A Powerful Tool for Specification of Logic Controllers},
  shorttitle = {Grafcet},
  author = {David, R.},
  year = {1995},
  month = sep,
  journal = {IEEE Transactions on Control Systems Technology},
  volume = {3},
  number = {3},
  pages = {253--268},
  issn = {1558-0865},
  doi = {10.1109/87.406973},
  url = {https://ieeexplore.ieee.org/abstract/document/406973},
  urldate = {2023-10-04},
  abstract = {Basically, a logic controller is a discrete-event system whose purpose is to control the behavior of a process which is itself (seen by the controller as) a discrete-event system, taking into account the state of this process and other information coming from an operator or from other systems. In the early 1970s, the need to describe increasingly complex logic controllers was becoming evident, since the programmable logic controllers (PLC) were becoming more powerful and more extensively used. This paper shows how Grafcet can be used for this purpose. Grafcet is a tool, drawing its inspiration from Petri nets (a general purpose mathematical tool allowing various discrete-event systems to be described), whose aim is the specification of logic controllers. It is the basis of the sequential function chart (SFC), an International Standard in 1987. This paper, introductory in nature, explains the Grafcet model using the classical-state table model and presents a method for interpreting grafcets.}
}

@article{juliusModeldrivenApproachTransforming2019,
  title = {A Model-Driven Approach for Transforming {{GRAFCET}} Specification into {{PLC}} Code Including Hierarchical Structures},
  author = {Julius, Robert and Trenner, Thomas and Neidig, Joerg and Fay, Alexander},
  year = {2019},
  month = jan,
  journal = {IFAC-PapersOnLine},
  series = {9th {{IFAC Conference}} on {{Manufacturing Modelling}}, {{Management}} and {{Control MIM}} 2019},
  volume = {52},
  number = {13},
  pages = {1767--1772},
  issn = {2405-8963},
  doi = {10.1016/j.ifacol.2019.11.457},
  url = {https://www.sciencedirect.com/science/article/pii/S2405896319314387},
  urldate = {2023-10-04},
  abstract = {GRAFCET, as defined in IEC 60848, is a powerful graphical modelling language to define the behavior of sequence controls with discrete event systems. In contrast to other specifications languages, one of the main advantages of GRAFCET is the specification of hierarchical structures. Therefore, distributed and nested program parts within a control application can be described by enclosing steps, partial-Grafcet and forcing orders. This contribution presents a meta-driven approach to transform GRAFCET specifications, including hierarchical structures, to Structured Text (ST), an IEC 61131-3 control programming language. To exactly meet the GRAFCET evolution rules and to mimic the specified behavior of the sequential control specification, an interpretation algorithm has been defined. The concept has been validated by means of an application example.}
}

@article{arzenGrafcetIntelligentSupervisory1994,
  title = {Grafcet for Intelligent Supervisory Control Applications},
  author = {{\AA}rz{\'e}n, Karl-Erik},
  year = {1994},
  month = oct,
  journal = {Automatica},
  volume = {30},
  number = {10},
  pages = {1513--1525},
  issn = {0005-1098},
  doi = {10.1016/0005-1098(94)90092-2},
  url = {https://www.sciencedirect.com/science/article/pii/0005109894900922},
  urldate = {2023-10-04},
  abstract = {The paper describes the application of Grafcet to supervisory, knowledge-based applications. Grafchart, a grafcet-based toolbox has been implemented in the real-time expert system environment G2. The toolbox supports steps, transitions, parallel paths, macro steps, and exception transitions. Several applications of the toolbox are presented. One of these is a full-scale industrial application where Grafchart is used to implement a hydrogen balance advisory control system.}
}

@article{liuCompleteMATLABBased2022,
  title = {A Complete {{MATLAB}} Based Application with {{GUI}} to Learn {{GRAFCET}}},
  author = {Liu, H. J and Dufour, P.},
  year = {2022},
  month = jan,
  journal = {IFAC-PapersOnLine},
  series = {13th {{IFAC Symposium}} on {{Advances}} in {{Control Education ACE}} 2022},
  volume = {55},
  number = {17},
  pages = {338--343},
  issn = {2405-8963},
  doi = {10.1016/j.ifacol.2022.09.302},
  url = {https://www.sciencedirect.com/science/article/pii/S2405896322015452},
  urldate = {2023-10-04},
  abstract = {This paper deals with an application developed with MATLAB at the Universit{\'e} Claude Bernard Lyon 1, France, for any user to be able to learn GRAFCET with numerical experiments without any automation hardware or real system. It has been designed during the COVID'19 lockdown to be easy to use for students with weak experience with computer programming (assuming few hours already spent on MATLAB) and assuming to have followed the basic course on logic systems and GRAFCET for a few hours. The user defined parts of the application is concerned with few MATLAB script files (with existing examples) to define his/her own input/output variables and his/her own GRAFCET. A Graphical User Interface (GUI) allows to play with two examples: A simple toy example with 5 input/output variables where the user can learn how to translate his/her ''paper'' GRAFCET solution into this application and how to use the GUI to run simulations for final GRAFCET evaluations. The second available system is a 4 floor lift based on 30 input/output variables which is a more complex example to focus to evaluate the user. For each example a digital twin is also available (its development is not a part of the user work) to update the state of underlying continuous variables and logic measures needed for the evolution inside the GRAFCET based on the state of the system actions updated by the GRAFCET. Other digital twin of systems and/or user defined GRAFCET may be added in the application.}
}

@article{schumacherFormalRepresentationGRAFCET2014,
  title = {Formal Representation of {{GRAFCET}} to Automatically Generate Control Code},
  author = {Schumacher, Frank and Fay, Alexander},
  year = {2014},
  month = dec,
  journal = {Control Engineering Practice},
  volume = {33},
  pages = {84--93},
  issn = {0967-0661},
  doi = {10.1016/j.conengprac.2014.09.008},
  url = {https://www.sciencedirect.com/science/article/pii/S0967066114002196},
  urldate = {2023-10-04},
  abstract = {Within the engineering of control code, model-based approaches become more and more important. Basically GRAFCET serves as a suitable modeling language but lacks an exhaustive formal representation of its structure and dynamic behavior since current approaches only consider subclasses of GRAFCET. Within this article the authors depict a systematic approach for an exhaustive formal model of GRAFCET, specifically by taking enclosing steps, forcing orders and time constraints into account. Based on this formal model of GRAFCET a method together with a tool framework are presented allowing for the automatic generation of control code.}
}

@misc{IEC6084820132013,
  type = {International Standard},
  title = {{{IEC}} 60848:2013 {{GRAFCET}} Specification Language for Sequential Function Charts},
  year = {2013},
  month = feb,
  number = {60848:2013},
  publisher = {IEC},
  url = {https://webstore.iec.ch/publication/3684},
  abstract = {IEC 60848:2013 defines the GRAFCET specification language for the functional description of the behaviour of the sequential part of a control system. It specifies the symbols and rules for the graphical representation of this language, as well as for its interpretation and has been prepared for automated production systems of industrial applications. This third edition cancels and replaces the second edition published in 2002 and constitutes a global technical revision with the extended definition of the concept of variables introducing: internal variable, input variable and output variable.}
}

@book{moodySupervisoryControlDiscrete1998,
  title = {Supervisory {{Control}} of {{Discrete Event Systems Using Petri Nets}}},
  author = {Moody, John O.},
  year = {31 {\v c}ervence 1998},
  series = {The {{International Series}} on {{Discrete Event Dynamic Systems}}},
  publisher = {Springer},
  address = {New York, NY},
  url = {https://doi.org/10.1007/978-1-4615-5711-1},
  abstract = {Supervisory Control of Discrete Event Systems Using Petri Nets presents a novel approach to its subject. The concepts of supervisory control and discrete event systems are explained, and the background material on general Petri net theory necessary for using the book's control techniques is provided. A large number of examples is used to illustrate the concepts and techniques presented in the text, and there are plenty of references for those interested in additional study or more information on a particular topic.  Supervisory Control of Discrete Event Systems Using Petri Nets is intended for graduate students, advanced undergraduates, and practicing engineers who are interested in the control problems of manufacturing, communication and computer networks, chemical process plants, and other high-level control applications. The text is written from an engineering perspective, but it is also appropriate for students of computer science, applied mathematics, or economics. The book contains enough background material to stand alone as an introduction to supervisory control with Petri nets, but it may also be used as a supplemental text in a course on discrete event systems or intelligent autonomous control.},
  isbn = {978-0-7923-8199-0}
}

@article{johnssonGrafchartItsRelations1998,
  title = {Grafchart and Its {{Relations}} to {{Grafcet}} and {{Petri Nets}}},
  author = {Johnsson, Charlotta and {\AA}rz{\'e}n, Karl-Erik},
  year = {1998},
  month = jun,
  journal = {IFAC Proceedings Volumes},
  series = {9th {{IFAC Symposium}} on {{Information Control}} in {{Manufacturing}} 1998 ({{INCOM}} '98), {{Nancy}}, {{France}}, 24-26 {{June}}},
  volume = {31},
  number = {15},
  pages = {95--100},
  issn = {1474-6670},
  doi = {10.1016/S1474-6670(17)40535-0},
  url = {https://www.sciencedirect.com/science/article/pii/S1474667017405350},
  urldate = {2023-10-04},
  abstract = {The paper presents Grafchart, a graphical programming language for sequential control applications. Grafchart has been influenced by Grafcet/SFC and Petri nets. In the paper the relations between Grafchart and Grafcet/SFC and between Grafcet and Petri nets are presented and discussed}
}
