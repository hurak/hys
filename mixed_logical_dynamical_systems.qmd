---
title: "Mixed logical dynamical"
---

Our motivation is to get rid of the IF-THEN conditions in the model. 

## Propositional logic and connectives {.scrollable}

 - Boolean variable (or elementary proposition) $X$ evaluates to `true` or `false`. 
    - For convenience also `0` or `1`, but ...

- Connectives
    - Conjunction (logical and): $X_1 \land X_2$
    - Disjunction (logical or): $X_1 \lor X_2$
    - Negation: $\neg X_2$   (or $\overline{X_2}$ or $\sim X_2$)
    - Implication: $X_1 \implies X_2$
    - Equivalence: $X_1 \iff X_2$
    - Logical XOR: $X_1 \oplus X_2$

## Equivalences of logic propositions

. . .

$$
X_1 \implies X_2 \quad  \text{is equivalent to} \quad \neg X_2 \implies \neg X_1
$$

. . .

$$
X_1 \iff X_2 \quad  \text{eq.} \quad (X_1 \implies X_2) \land (X_2 \implies X_1)
$$

. . .

$$
X_1 \land X_2 \qquad  \text{eq.} \qquad \neg (\neg X_1 \lor \neg X_2)
$$

. . .

$$
X_1 \implies X_2 \qquad  \text{eq.} \qquad \neg X_1 \lor X_2
$$

::: {.notes}
The last one can be seen as follows: it cannot happen that $X1 \land \neg X2$, that is, it holds that $\neg(X1 \land \neg X2)$. De Morgan gives $\neg X1 \lor X2$
:::

## Binary variables related to the Boolean ones 

- Associate with the Boolean variable $X$ a binary variable $\delta\in\{0,1\}$ such that 
$$
\delta =
\begin{cases}
0 & \text{if} \; \neg X\\
1 & \text{if} \; X
\end{cases}
$$

## Integer (in)equalities related to the logical formulas {.scrollable}

## And

$$X_1 \land X_2$$

. . .

$$[\delta_1=1] \land [\delta_2=1]$$ 

. . .

$$\delta_1=1, \; \delta_2=1$$

- Another (discarded) possibility: 

. . .

$$\delta_1 \delta_2 = 1$$ 

## Or

$$X_1 \lor X_2$$ 

. . .

$$[\delta_1=1] \lor [\delta_2=1]$$

. . .

$$\delta_1 + \delta_2\geq 1$$

## Negation

$$\neg X_1$$

. . .

$$\neg [\delta_1=1]$$

. . .

$$\delta_1 = 0$$

## Xor

$$X_1 \oplus X_2$$

. . .

$$[\delta_1=1] \oplus [\delta_2=1]$$

. . .

$$\delta_1 + \delta_2 = 1$$

## Implication {.scrollable}

$$X_1 \implies X_2$$

. . .

$$[\delta_1=1] \implies [\delta_2=1]$$ 

- equivalently, using $\neg X_1 \lor X_2$,
$$\neg [\delta_1=1] \lor [\delta_2=1],$$

- which translates to 
$$(1-\delta_1) + \delta_2\geq 1,$$ 

- which simplifies to 
$$\delta_1 - \delta_2 \leq 0$$

## Equivalence

$$X_1 \iff X_2$$

. . .

$$[\delta_1=1] \iff [\delta_2=1]$$

. . .

$$\delta_1 - \delta_2 = 0$$

## Assignment {.scrollable}

$$X_3 \iff (X_1 \land X_2)$$

. . .

$$[\delta_3=1] \iff ([\delta_1=1] \land [\delta_2=1])$$

- Expressing the equivalence using implications 
$$X_3 \implies X_1,\; X_3\implies X_2, \; (X_1 \land X_2) \implies X_3$$

- The the last one is equivalent to
$$\neg (X_1 \land X_2) \lor X_3$$

- which can be simplified to
$$\neg X_1 \lor \neg X_2 \lor X_3$$

- which translates to 
$$\neg [\delta_1=1] \lor \neg [\delta_2 = 1] \lor [\delta_3 = 1]$$

- which finally leads to the inequality
$$(1-\delta_1) + (1-\delta_2) + \delta_3 \geq 1$$

- and after simplification
$$\delta_1 + \delta_2 - \delta_3 \leq 1.$$

- And don't forget to consider the first to inequalities too
$$
-\delta_1 + \delta_3 \leq 0, \quad -\delta_2 + \delta_3 \leq 0. 
$$

## General transformation of Boolean expressions to integer inequalities {.scrollable}

- From Conjunctive Normal Form (CNF)
$$
\bigwedge_{j=1}^m \left[\left(\lor_{i\in \mathcal{P}_j} X_i\right) \lor \left(\lor_{i\in \mathcal{N}_j} \neg X_i\right)\right]
$$

- to 0-1 integer inequalities defining a polyhedron
$$
\begin{aligned}
\sum_{i\in \mathcal{P}_1} \delta_i + \sum_{i\in \mathcal{N}_1} (1-\delta_i) &\geq 1,\\
&\vdots\\
\sum_{i\in \mathcal{P}_m} \delta_i + \sum_{i\in \mathcal{N}_m} (1-\delta_i) &\geq 1.
\end{aligned}
$$

## Finite state machine (FSM) using binary variables

- Encode the discrete state variables in binary
$$
x_b \in \{0,1\}^{n_b}
$$

- Similarly the discrete inputs
$$
u_b \in \{0,1\}^{m_b}
$$

- The logical state equation then
$$
x_b(k+1) = f_b(x_b(k),u_b(k),\delta_e(k))
$$

## Example {.scrollable}

. . .

![](figures/fsm_example.png){width=80%}

- State update/transition equation
$$
\begin{aligned}
& x_d(k+1) = \\
&\begin{cases}
\text{Red} & \text{if}\; ([x_d = \text{green}] \land \neg [\delta_3=1]) \lor ([x_d = \text{red}] \land \neg [\delta_3=1])\\
\text{Green} & \text{if} \; \ldots\\
\text{Blue} & \text{if} \; \ldots 
\end{cases}
\end{aligned}
$$


- Binary encoding of the discrete states
$$
\text{Red}: x_b = \begin{bmatrix}0\\0 \end{bmatrix}, \; \text{Green}: x_b = \begin{bmatrix}0\\1 \end{bmatrix}, \; \text{Blue}: x_b = \begin{bmatrix}1\\0 \end{bmatrix}
$$

- Reformulating the state update equations for binary variables
$$
\begin{aligned}
x_{b1} &= (\neg [x_{b1} = 1] \land \neg [x_{b2} = 1]  \land \neg [\delta_1=1]) \\
&\quad (\neg [x_{b1} = 1] \land \neg [x_{b2} = 1]  \land [\delta_1=1]) \land [u_{b2}=1]\\
&\quad (\neg [x_{b1} = 1] \land [x_{b2} = 1]  \land \neg [u_{b1}=1] \land [\delta_3=1])\\
&\quad \lor ([x_{b1} = 1]\land \neg [\delta_2=1])\\
x_{b2} &= \ldots
\end{aligned}
$$

- Simplify, convert to CNF.


## Mixing logical and continuous

- see Indicator variables.

## Logical implies continuous

$$X \implies [f(x)\leq 0]$$

. . .

$$[\delta = 1] \implies [f(x)\leq 0]$$

- introduce $M$
$$
f(x) \leq (1-\delta) M
$$

- that is large enough so that when $\delta=0$, there is no practical restriction on $f$. 
    - Big-M technique.

## Continuous implies logical {.scrollable}

$$[f(x)\leq 0] \implies X$$

. . .

$$[f(x)\leq 0] \implies [\delta = 1]$$

- Equivalently
$$\neg [\delta = 1] \implies \neg [f(x)\leq 0],$$

- that is, 
$$[\delta = 0] \implies [f(x) > 0]$$

- Introduce $m$ such that $f(x)>0$ is enforced when $\delta=0$
$$
f(x) > m\delta
$$

- but small enough that there is no restriction on $f$ when $\delta=1$.

- For numerical reasons, modify to nonstrict inequality
$$
f(x) \geq \epsilon + (m-\epsilon)\delta,
$$
where $\epsilon\approx 0$ (for example, machine epsilon).

## Equivalence between logical and continuous

- Combining the previous two implications.

. . .

$$
\begin{aligned}
f(x) &\leq (1-\delta) M,\\
f(x) &\geq \epsilon + (m-\epsilon)\delta.
\end{aligned}
$$

## IF-THEN-ELSE rule as an inequality {.scrollable}

- If $X$ 
    - then $z = a^\top x + b^\top u + f$, 
    - else $z = 0$.

- It can be expressed as a **product**
$$
z = \delta\,(a^\top x + b^\top u + f)
$$

. . .

$$
\begin{aligned}
z &\leq M\delta,\\
- z &\leq -m\delta,\\
z &\leq a^\top x + b^\top u + f - m(1-\delta),\\
-z &\leq -(a^\top x + b^\top u + f) + M(1-\delta).
\end{aligned}
$$

:::{.notes}
The reasoning is that if $\delta=0$, then $z$ is restricted, while $a^\top x + b^\top u + f$ is not. And the other way around.
:::

## Another IF-THEN-ELSE rule {.scrollable}

- If $X$ 
    - then $z = a_1^\top x + b_1^\top u + f_1$, 
    - else $z = a_2^\top x + b_2^\top u + f_2$.

- It can be expressed as
$$
\begin{aligned}
z &= \delta\,(a_1^\top x + b_1^\top u + f_1) \\
&\quad + (1-\delta)(a_2^\top x + b_2^\top u + f_2)
\end{aligned}
$$

. . .

$$
\begin{aligned}
(m_2-M_1)\delta  + z &\leq a_2^\top x + b_2^\top u + f_2,\\
(m_1-M_2)\delta  - z &\leq -a_2^\top x - b_2^\top u - f_2,\\
(m_1-M_2)(1-\delta)  + z &\leq a_1^\top x + b_1^\top u + f_1,\\
(m_2-M_1)(1-\delta)  - z &\leq -a_1^\top x - b_1^\top u - f_1.
\end{aligned}
$$


## Generation of events by mixing logical and continuous variables in inequalities

$$
\begin{aligned}
h_i(x_c(k), u_c(k)) &\leq M_i (1-\delta_{e,i})\\
h_i(x_c(k), u_c(k)) &\geq \epsilon + (m_i-\epsilon) \delta_{e,i}
\end{aligned}
$$

## Switched affine system {.scrollable}

- We want to get rid of the `IF-THEN` and formulate the switching mechanism into the format of inequalities too.

. . .

$$
x_c(k+1) = \sum_{i=1}^s z_i(k),  
$$

- where
$$
z_1(k) = 
\begin{cases}
A_1 x_c(k) + B_1 u_c(k) + f_1 & \text{if}\;i(k)=1\\
0 & \text{otherwise}
\end{cases}
$$

. . .

$$\quad \vdots$$

. . .

$$
z_s(k) = 
\begin{cases}
A_s x_c(k) + B_s u_c(k) + f_s & \text{if}\;i(k)=s\\
0 & \text{otherwise}
\end{cases}
$$

- For each $i\in \{1, 2, \ldots, s\}$

. . .

$$
\begin{aligned}
z_i &\leq M_i\delta_i,\\
- z_i &\leq -m_i\delta_i,\\
z_i &\leq a_i^\top x + b_i^\top u + f_i - m_i(1-\delta_i),\\
-z_i &\leq -(a_i^\top x + b_i^\top u + f_i) + M_i(1-\delta_i).
\end{aligned}
$$

## Mixed logical dynamical (MLD) system 

$$
\begin{aligned}
x(k+1) &= Ax(k) + B_u u(k) + B_\delta\delta + B_zz(k) + B_0\\
y(k) &= Cx(k) + D_u u(k) + D_\delta \delta + D_z z + D_0\\
E_\delta \delta &+ E_z z(k) \leq E_u u(k) + E_x x(k) + E_0  
\end{aligned}
$$

## Simple example


## HYSDEL language

## Piecewise affine systems

. . .

$$
\begin{aligned}
x(k+1) &= A_{i(k)}x(k) + B_{i(k)} u(k) + f_{i(k)}\\
y(k) &= C_{i(k)}x(k) + D_{i(k)} u(k) + g_{i(k)}\\
& \; H_{i(k)} x(k) + J_{i(k)} u(k) \leq K_{i(k)}
\end{aligned}
$$

- DHA, MLD, PWA are equivalent.
